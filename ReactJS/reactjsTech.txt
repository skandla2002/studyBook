1. 리엑트의 시작
 - 리엑트 이해
 - 리엑트 특징: virtual DOM
               기타 특징
 - 작업환경 설정: 
            Node.js와 npm
            yarn
            에디터
            Git
            create-react-app 으로 생성
2. JSX
 - 코드 이해하기
 - JSX
 - JSX 장점:
            보기쉽고 익숙하다
            더욱 높은 활용도
 - JSX 문법:
            감싸인 요소
            자바스크립트 표현
            if 문 대신 조건부 연산자
            AND 연산자(&&)를 사용한 조건부 렌더링
            undefined를 렌더링 하지 않기
            인라인 스타일링
            class 대신 className
            꼭 닫아야 하는 태그
            주석
 - ESLint와 Prettier 적용하기:
            ESLint
            Prettier
3. 컴포넌트
 - 클래스형 컴포넌트
 - 첫 컴포넌트 생성:
            src 디렉터리에 MyComponent.js 파일 생성
            코드 작성하기
            모듈 내보내기 및 불러오기
 - props:
            JSX 내부에서 props 렌더링
            컴포넌트를 사용할 때 props 값 지정하기
            proprs 기본 값 설정: defaultProps
            태그 사이의 내용을 보여주는 children
            비구조화 할당 문법을 통해 props 내부 값 추출하기
            propTypes를 통한 props 검증
            클래스형 컴포넌트에서 props 사용하기
 - state:
            클래스형 컴포넌트의 state
            함수형 컴포넌트에서 useState 사용하기
 - state를 사용할 때 주의 사항
4. 이벤트 핸들링
 - 리액트의 이벤트 시스템
            이벤트 사용할때 주의 사항
            이벤트 종류
 - 예제로 이벤트 핸들링 익히기
            컴포넌트 생성 및 불러오기
            onChange 이벤트 핸들링 하기
            임의 메서드 만들기
            input 여러개 다루기
            onKeyPress 이벤트 핸들링
 -함수형 컴포넌트로 구현해 보기
5. ref: DOM에 이름달기
 - ref는 어떤 상황에서 사용
            App 컴포넌트에서 렌더링
            DOM을 꼭 사용해야 하는 상황
 - ref 사용
            콜백 함수를 통한 ref 설정
            createRef를 통한 ref 설정    
 - 컴포넌트에 ref 달기
            사용법
            컴포넌트 초기 설정
            컴포넌트에 메서드 생성
            컴포넌트에 ref 달고 내부 메서드 사용
6. 컴포넌트 반복
 - 자바스크립트 배열의 map() 함수
 - 데이터 배열을 컴포넌트 배열로 변환하기
 - key
 - 응용:
            초기 상태 설정하기
            데이터 추가 기능 구현
            데이터 제거 기능 구현
7. 컴포넌트의 라이프사이클 메서드
 - 라이프사이클 메서드의 이해하기
 - 라이프사이클 메서드 살펴보기:
            render()
            constructor
            getDerivedStateFromProps
            componentDidMount
            shouldComponentUpdate
            getSnapShotBeforUpdate
            componentDidUpdate
            componentWillUnmount
            componentDidCatch
 - 라이프사이클 메서드 사용하기:
            App 컴포넌트에서 예제 컴포넌트사용
            에러 잡아내기
8. Hooks
 - useState
 - useEffect:
            마운트될 때만 실행하고 싶을 때
            특정 값이 업데이트될 때만 실행하고 싶을 때
            뒷정리 하기
 - useReducer:
            카운터 구현하기
            인풋 상태 관리하기
 - useMemo
 - useCallback
 - useRef
 - 커스텀 Hooks 만들기
 - 다른 Hooks
9. 컴포넌트 스타일링
 - 일반 CSS:
            이름 짓는 규칙
            CSS Selector
 - SaSS:
            utils 함수 분리
            sass-loader 설정
            node_modules에서 라이브러리 불러오기
 - CSS node_module
            classnames
            Sass와 함께 사용하기
            CSS Module아닌 파일에서 CSS Module 사용
 - styled-components
            Tagged 템플릿 리터럴
            스타일링된 엘리먼트 만들기
            스타일에서 porps 조회하기
            props에 따른 조건부 스타일링
            반응형 디자인
    

--------- 내가 생각한 것 ---------------

- ES 6 이후 문법
 Arrow 함수
 spread 인자
 map, filter
 import / export


- react js Life cycle
  mount                        update                  unmount
  getDried            getDriedStateFromProps    componentWillUnmount
  render              get
  componentDidMount   render
                      getSnapShot
                      componentDidUpdate

- react js component / functional 
  class A extends React.Component {
      constructor(props){
          super(props);
          this.state = {
              ...
          }
      }
      // Life Cycle function
      // Costom function
      render(){
          return ();
      }
  }
  export default A;

  function A = (props) => {
      this.state = {
          ...
      }
      useEffect(){

      }
      return (
          ...
      )
  }

- react js styled component

- react redux
  : action(type, value)
    dispatch(action)

- SPA
  create-react-app

- Server Side
  : 검색 엔진에 용이(SEO)

