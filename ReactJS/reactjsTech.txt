1. 리엑트의 시작
 - 리엑트 이해
 - 리엑트 특징: virtual DOM
               기타 특징
 - 작업환경 설정: 
            Node.js와 npm
            yarn
            에디터
            Git
            create-react-app 으로 생성
2. JSX
 - 코드 이해하기
 - JSX
 - JSX 장점:
            보기쉽고 익숙하다
            더욱 높은 활용도
 - JSX 문법:
            감싸인 요소
            자바스크립트 표현
            if 문 대신 조건부 연산자
            AND 연산자(&&)를 사용한 조건부 렌더링
            undefined를 렌더링 하지 않기
            인라인 스타일링
            class 대신 className
            꼭 닫아야 하는 태그
            주석
 - ESLint와 Prettier 적용하기:
            ESLint
            Prettier
3. 컴포넌트
 - 클래스형 컴포넌트
 - 첫 컴포넌트 생성:
            src 디렉터리에 MyComponent.js 파일 생성
            코드 작성하기
            모듈 내보내기 및 불러오기
 - props:
            JSX 내부에서 props 렌더링
            컴포넌트를 사용할 때 props 값 지정하기
            proprs 기본 값 설정: defaultProps
            태그 사이의 내용을 보여주는 children
            비구조화 할당 문법을 통해 props 내부 값 추출하기
            propTypes를 통한 props 검증
            클래스형 컴포넌트에서 props 사용하기
 - state:
            클래스형 컴포넌트의 state
            함수형 컴포넌트에서 useState 사용하기
 - state를 사용할 때 주의 사항
4. 이벤트 핸들링
 - 리액트의 이벤트 시스템
            이벤트 사용할때 주의 사항
            이벤트 종류
 - 예제로 이벤트 핸들링 익히기
            컴포넌트 생성 및 불러오기
            onChange 이벤트 핸들링 하기
            임의 메서드 만들기
            input 여러개 다루기
            onKeyPress 이벤트 핸들링
 -함수형 컴포넌트로 구현해 보기
5. ref: DOM에 이름달기
 - ref는 어떤 상황에서 사용
            App 컴포넌트에서 렌더링
            DOM을 꼭 사용해야 하는 상황
 - ref 사용
            콜백 함수를 통한 ref 설정
            createRef를 통한 ref 설정    
 - 컴포넌트에 ref 달기
            사용법
            컴포넌트 초기 설정
            컴포넌트에 메서드 생성
            컴포넌트에 ref 달고 내부 메서드 사용
6. 컴포넌트 반복
 - 자바스크립트 배열의 map() 함수
 - 데이터 배열을 컴포넌트 배열로 변환하기
 - key
 - 응용:
            초기 상태 설정하기
            데이터 추가 기능 구현
            데이터 제거 기능 구현
7. 컴포넌트의 라이프사이클 메서드
 - 라이프사이클 메서드의 이해하기
 - 라이프사이클 메서드 살펴보기:
            render()
            constructor
            getDerivedStateFromProps
            componentDidMount
            shouldComponentUpdate
            getSnapShotBeforUpdate
            componentDidUpdate
            componentWillUnmount
            componentDidCatch
 - 라이프사이클 메서드 사용하기:
            App 컴포넌트에서 예제 컴포넌트사용
            에러 잡아내기
8. Hooks
 - useState
 - useEffect:
            마운트될 때만 실행하고 싶을 때
            특정 값이 업데이트될 때만 실행하고 싶을 때
            뒷정리 하기
 - useReducer:
            카운터 구현하기
            인풋 상태 관리하기
 - useMemo
 - useCallback
 - useRef
 - 커스텀 Hooks 만들기
 - 다른 Hooks
9. 컴포넌트 스타일링
 - 일반 CSS:
            이름 짓는 규칙
            CSS Selector
 - SaSS:
            utils 함수 분리
            sass-loader 설정
            node_modules에서 라이브러리 불러오기
 - CSS node_module
            classnames
            Sass와 함께 사용하기
            CSS Module아닌 파일에서 CSS Module 사용
 - styled-components
            Tagged 템플릿 리터럴
            스타일링된 엘리먼트 만들기
            스타일에서 porps 조회하기
            props에 따른 조건부 스타일링
            반응형 디자인
10. Web Application 개발:
 - 프로젝트 준비: lib 설치, Prettier 설정, index.css 설정, 컴포넌트 초기화
 - UI 구성: Template, Insert, ListItem, List
 - 기능 구현: 상태, 항목 추가, 지우기, 수정
11. 컴포넌트 성능 최적화
 - 많은 데이터 렌더링
 - 크롬개발자 도구를 통한 성능 모니터링
 - 느려지는 원인 분석
 - React.memo를 사용하여 컴포넌트 성능 최적화
 - onToggle, onRemove함수가 바뀌지 않게 하기: useState, useReducer
 - 불변성
 - List 컴포넌트 최적화 하기
 - react-virtualized를 사용한 렌더링 최적화
12. immer를 사용하여 더 쉽게 불변성 유지하기
 - immer를 설치하고 사용법 알아보기: 프로젝트 중비, immer 없이 불변성 유지, immer 사용법, immer 적용, useState의 함수형 업데이트와 immer 함께 쓰기
13. 리엑트 Router로 SPA 개발
 - SPA란 / 단점
 - 프로젝트 준비 / 기본: 생성, lib 설치, 라우터 적용, 페이지 만들기, 특정 주소 컴포넌트 연결, Link 컴포넌트 사용
 - Route하나에 여러개의 path 설정
 - URL 파라미터와 쿼리
 - 서브 라우트
 - 리엑트 라우터 부가 기능: history, withRouter, Switch, NavLink
14. 외부 API를 연동하여 뉴스 뷰어 만들기
 - 비동기 작업의 이해하기: 콜백, Promise, async/await
 - axios
 - 뉴스뷰어 UI
 - 데이터 연동하기
 - 카테고리 기능 구현
 - 리엑트 라우터 적용
 - usePromise 커스텀 Hook 만들기
15. Context API
 - Context API를 사용
16. 리덕스 라이브러리
 - 개념: 액션, 액션 생성 함수, 리듀서, 스토어, 디스패치, 구독
 - 리엑트 없이 리덕스: parcel로 프로젝트 만들기, 간단한 UI 구성, DOM 레퍼런스 만들기, 엑션 타입과 액션 생성함수 정의, 초깃값 설정, 리듀서 함수 정의, 스토어 만들기 render 함수, 구독하기, 액션 발생 시키기
 - 리덕스의 세가지 규칙: 단일 스토어, 읽기 전용 상태, 리듀서는 순수한 함수
17. 리덕스를 사용하여 리액트 애플리 케이션 상태 관리
 - 작업환경 설정
 - UI 준비: 카운터 컴포넌트 만들기, 할일 목록 컴포넌트 만들기
 - 리덕스 관련 코드 작성하기
 - 리액트 애플리 케이션에 리덕스 적용하기
 - 컨테이너 컴포넌트 만들기
 - 리덕스 더 편하게 사용하기
 - Hooks를 사용하여 컨테이너 컴포넌트 만들기
18. 리덕스 미들웨어를 토한 비동기 작업 관리
 - 작업환경 준비
 - 미들웨어란(미들웨어 만들기, redux-logger)
 - 비동기 작업을 처리하는 미들웨어 사용(redux-thunk, redux-saga)
19. 코드 스플리팅
 - 자바스크립트 함수 비동기 로딩
 - React.lazy와 Suspense를 통한 컴포넌트 코드 스플리팅
            state를 사용한 코드 스플리팅
            React.lazy와 Suspense 사용
            Loadable Components를 통한 코드 스플리팅
20. 서버 사이드 렌더링
 - 서버 사이드 렌더링: 장점 / 단점 / 코드스플리팅 충돌
 - 프로젝트 준비
 - 서버사이드 렌더링 구현
 - 데이터 로딩
 - 서버 사이드 렌더링과 코드 스플리팅
 - 서버 사이드 렌더링의 환경 구축을 위한 대안: Next.js, Razzle
21. 백엔드 프로그래밍: Node.js의 Koa 프레임워크
 - 소개하기: 백엔트, Node.js, Koa
 - 작업 환경 준비: Node 설치 확인, 프로젝트 생성, ESLint와 Prettier 설정
 - Koa 기본 사용법: 서버 띄우기, 미들웨어
 - nodemon 사용
 - koa-router 사용: 기본 사용법, 라우트 파라미터와 쿼리, REST API, 라우트 모듈화, posts 라우트 생성
22. mongoose를 이용한 MongoDB 연동 실습
 - 소개(MongoDB 구조, 스키마 디자인)
 - MongoDB 서버 준비: 설치, MongoDB 작동 확인
 - mongoose의 설치, 적용
 - esm으로 ES 모듈 import/export
 - 데이터 베이스의 스키마와 모델
 - MongoDB Compass의 설치/사용
 - 데이터 생성, 조회
 - 데이터 삭제, 수정
 - 요청 검증
 - 페이지네이션 구현
23. JWT를 통한 회원 인증 시스템 구현
 - JWT의 이해: 세션기반, 토큰 기반 인증 차이
 - User 스키마/모델 만들기: 모델 메서드, 스테틱 메서드
 - 회원 인증 API 만들기: 회원가입, 로그인
 - 토큰 발급 및 검증: 비밀키 설정, 토큰 발급, 토큰 검증, 토큰 재발급, 로그아웃 기능 구현
 - posts API에 회원 인증 시스템 도입하기: 
            스키마 수정하기
            posts 컬렉션 비우기
            로그인 했을때 API 사용
            포스트 작성시 사용자 정보 넣기
            포스트 수정/삭제시 권한 확인
 - username/tags로 포스트 필터링 하기
24. 프런트엔드 프로젝트:시작 및 회원 인증 구현
 - 작업 환경 준비:
            설정 파일 만들기
            라우터 적용
            스타일 설정
            Button 컴포넌트 만들기
            리덕스 적용
 - 회원 가입과 로그인 구현
            UI 준비하기
            리덕스로 폼 상태 관리하기
            API 연동하기
            회원가입 구현
            로그인 구현
            회원 인증 에러 처리
 - 헤더 컴포넌트 생성 및 로그인 유지
            헤더 컴포넌트 만들기
            로그인 상태를 보여주고 유지하기
            로그아웃 기능 구현
25. 글쓰기 기능 구현하기
 - 에디터 UI 구현
 - 에디터 하단 컴포넌트 UI 구현
 - 리덕스로 글쓰기 상태 관리
26. 포스트 조회 기능 구현
 - 포스트 읽기 페이지 구현
 - 포스트 목록 페이지 구현
27. 수정/삭제 기능 구현 및 마무리
 - 포스트 수정
 - 포스트 삭제
 - react-helmet-async로 meta 테그 설정
 - 프로젝트 마무리: 프로젝트 빌드, koa-static 정적 파일 제공, 더 할수 있는 작업
28. 그다음.
 - 리엑트 관련 커뮤니티: 국내 / 해외
 - 책의 연장성
 - 사이드 프로젝트 생성



    

--------- 내가 생각한 것 ---------------

- ES 6 이후 문법
 Arrow 함수
 spread 인자
 map, filter
 import / export


- react js Life cycle
  mount                        update                  unmount
  getDried            getDriedStateFromProps    componentWillUnmount
  render              get
  componentDidMount   render
                      getSnapShot
                      componentDidUpdate

- react js component / functional 
  class A extends React.Component {
      constructor(props){
          super(props);
          this.state = {
              ...
          }
      }
      // Life Cycle function
      // Costom function
      render(){
          return ();
      }
  }
  export default A;

  function A = (props) => {
      this.state = {
          ...
      }
      useEffect(){

      }
      return (
          ...
      )
  }

- react js styled component

- react redux
  : action(type, value)
    dispatch(action)

- SPA
  create-react-app

- Server Side
  : 검색 엔진에 용이(SEO)

